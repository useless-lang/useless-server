// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "_$ebnf$1", "symbols": []},
    {"name": "_$ebnf$1", "symbols": ["_$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "_", "symbols": ["_$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "__$ebnf$1", "symbols": ["wschar"]},
    {"name": "__$ebnf$1", "symbols": ["__$ebnf$1", "wschar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "__", "symbols": ["__$ebnf$1"], "postprocess": function(d) {return null;}},
    {"name": "wschar", "symbols": [/[ \t\n\v\f]/], "postprocess": id},
    {"name": "whitespace$ebnf$1", "symbols": [/[\s]/]},
    {"name": "whitespace$ebnf$1", "symbols": ["whitespace$ebnf$1", /[\s]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "whitespace", "symbols": ["whitespace$ebnf$1"], "postprocess": () => null},
    {"name": "program$ebnf$1", "symbols": ["contract"]},
    {"name": "program$ebnf$1", "symbols": ["program$ebnf$1", "contract"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "program", "symbols": ["program$ebnf$1"], "postprocess": ([contracts]) => contracts},
    {"name": "contract$string$1", "symbols": [{"literal":"c"}, {"literal":"o"}, {"literal":"n"}, {"literal":"t"}, {"literal":"r"}, {"literal":"a"}, {"literal":"c"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "contract$ebnf$1", "symbols": []},
    {"name": "contract$ebnf$1", "symbols": ["contract$ebnf$1", "declaration"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "contract", "symbols": ["contract$string$1", "identifier", {"literal":"{"}, "contract$ebnf$1", {"literal":"}"}], "postprocess": ([_, name, __, declarations, ___]) => ({ type: "contract", name: name.value, body: declarations })},
    {"name": "declaration", "symbols": ["variableDecl"], "postprocess": id},
    {"name": "declaration", "symbols": ["functionDecl"], "postprocess": id},
    {"name": "declaration", "symbols": ["structDecl"], "postprocess": id},
    {"name": "variableDecl$string$1", "symbols": [{"literal":"l"}, {"literal":"e"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "variableDecl", "symbols": ["variableDecl$string$1", "identifier", {"literal":":"}, "type", {"literal":"="}, "expression", {"literal":";"}], "postprocess": ([_, name, __, type, ___, value, ____]) => ({ type: "variableDecl", name: name.value, varType: type, value })},
    {"name": "functionDecl$string$1", "symbols": [{"literal":"f"}, {"literal":"u"}, {"literal":"n"}, {"literal":"c"}, {"literal":"t"}, {"literal":"i"}, {"literal":"o"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "functionDecl$ebnf$1", "symbols": []},
    {"name": "functionDecl$ebnf$1", "symbols": ["functionDecl$ebnf$1", "statement"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "functionDecl", "symbols": ["functionDecl$string$1", "identifier", {"literal":"("}, "params", {"literal":")"}, "payable", {"literal":":"}, "type", {"literal":"{"}, "functionDecl$ebnf$1", {"literal":"}"}], "postprocess": ([_, name, __, params, ___, payable, ____, returnType, _____, body, ______]) => ({ type: "functionDecl", name: name.value, params: params || [], payable: payable !== null, returnType, body })},
    {"name": "payable$string$1", "symbols": [{"literal":"p"}, {"literal":"a"}, {"literal":"y"}, {"literal":"a"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "payable", "symbols": ["payable$string$1"], "postprocess": () => true},
    {"name": "payable", "symbols": [], "postprocess": () => null},
    {"name": "structDecl$string$1", "symbols": [{"literal":"s"}, {"literal":"t"}, {"literal":"r"}, {"literal":"u"}, {"literal":"c"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "structDecl$ebnf$1", "symbols": ["structField"]},
    {"name": "structDecl$ebnf$1", "symbols": ["structDecl$ebnf$1", "structField"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "structDecl", "symbols": ["structDecl$string$1", "identifier", {"literal":"{"}, "structDecl$ebnf$1", {"literal":"}"}], "postprocess": ([_, name, __, fields, ___]) => ({ type: "structDecl", name: name.value, fields })},
    {"name": "structField", "symbols": ["identifier", {"literal":":"}, "type", {"literal":";"}], "postprocess": ([name, _, type, __]) => ({ name: name.value, type })},
    {"name": "type", "symbols": ["primitive"], "postprocess": id},
    {"name": "type", "symbols": ["arrayType"], "postprocess": id},
    {"name": "type", "symbols": ["mapType"], "postprocess": id},
    {"name": "type", "symbols": ["unionType"], "postprocess": id},
    {"name": "type", "symbols": ["identifier"], "postprocess": ([id]) => ({ type: "namedType", value: id.value })},
    {"name": "primitive$string$1", "symbols": [{"literal":"n"}, {"literal":"u"}, {"literal":"m"}, {"literal":"b"}, {"literal":"e"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "primitive", "symbols": ["primitive$string$1"], "postprocess": () => ({ type: "primitive", value: "number" })},
    {"name": "primitive$string$2", "symbols": [{"literal":"b"}, {"literal":"o"}, {"literal":"o"}, {"literal":"l"}, {"literal":"e"}, {"literal":"a"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "primitive", "symbols": ["primitive$string$2"], "postprocess": () => ({ type: "primitive", value: "boolean" })},
    {"name": "primitive$string$3", "symbols": [{"literal":"s"}, {"literal":"t"}, {"literal":"r"}, {"literal":"i"}, {"literal":"n"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "primitive", "symbols": ["primitive$string$3"], "postprocess": () => ({ type: "primitive", value: "string" })},
    {"name": "primitive$string$4", "symbols": [{"literal":"v"}, {"literal":"o"}, {"literal":"i"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "primitive", "symbols": ["primitive$string$4"], "postprocess": () => ({ type: "primitive", value: "void" })},
    {"name": "arrayType", "symbols": ["type", {"literal":"["}, "number", {"literal":"]"}], "postprocess": ([elementType, _, size, __]) => ({ type: "arrayType", elementType, size: parseInt(size.join("")) })},
    {"name": "mapType$string$1", "symbols": [{"literal":"M"}, {"literal":"a"}, {"literal":"p"}, {"literal":"<"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "mapType", "symbols": ["mapType$string$1", "type", {"literal":","}, "type", {"literal":">"}], "postprocess": ([_, keyType, __, valueType, ___]) => ({ type: "mapType", keyType, valueType })},
    {"name": "unionType", "symbols": ["type", {"literal":"|"}, "type"], "postprocess": ([left, _, right]) => ({ type: "unionType", types: [left, right] })},
    {"name": "params$subexpression$1$ebnf$1", "symbols": []},
    {"name": "params$subexpression$1$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "param"]},
    {"name": "params$subexpression$1$ebnf$1", "symbols": ["params$subexpression$1$ebnf$1", "params$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "params$subexpression$1", "symbols": ["param", "params$subexpression$1$ebnf$1"]},
    {"name": "params", "symbols": ["params$subexpression$1"], "postprocess": ([first, rest]) => [first, ...rest.map(([_, p]) => p)]},
    {"name": "params", "symbols": [], "postprocess": () => null},
    {"name": "param", "symbols": ["identifier", {"literal":":"}, "type"], "postprocess": ([name, _, type]) => ({ name: name.value, type })},
    {"name": "identifier$ebnf$1", "symbols": [/[a-zA-Z_]/]},
    {"name": "identifier$ebnf$1", "symbols": ["identifier$ebnf$1", /[a-zA-Z_]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "identifier$ebnf$2", "symbols": []},
    {"name": "identifier$ebnf$2", "symbols": ["identifier$ebnf$2", /[a-zA-Z0-9_]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "identifier", "symbols": ["identifier$ebnf$1", "identifier$ebnf$2"], "postprocess": ([first, rest]) => ({ type: "identifier", value: first.join("") + rest.flat().join("")})},
    {"name": "expression", "symbols": ["number"], "postprocess": ([n]) => ({ type: "number", value: parseInt(n.join("")) })},
    {"name": "expression", "symbols": ["stringLiteral"], "postprocess": id},
    {"name": "expression", "symbols": ["identifier"], "postprocess": id},
    {"name": "expression", "symbols": ["expression", {"literal":"+"}, "expression"], "postprocess": ([left, _, right]) => ({ type: "binaryOp", operator: "+", left, right })},
    {"name": "expression", "symbols": ["expression", {"literal":"<"}, "expression"], "postprocess": ([left, _, right]) => ({ type: "binaryOp", operator: "<", left, right })},
    {"name": "expression$string$1", "symbols": [{"literal":"n"}, {"literal":"e"}, {"literal":"w"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "expression", "symbols": ["expression$string$1", "mapType", {"literal":"("}, {"literal":")"}], "postprocess": ([_, mapType, __, ___]) => ({ type: "newMap", mapType })},
    {"name": "expression$string$2", "symbols": [{"literal":"m"}, {"literal":"s"}, {"literal":"g"}, {"literal":"."}, {"literal":"s"}, {"literal":"e"}, {"literal":"n"}, {"literal":"d"}, {"literal":"e"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "expression", "symbols": ["expression$string$2"], "postprocess": () => ({ type: "global", value: "msg.sender" })},
    {"name": "expression$string$3", "symbols": [{"literal":"m"}, {"literal":"s"}, {"literal":"g"}, {"literal":"."}, {"literal":"v"}, {"literal":"a"}, {"literal":"l"}, {"literal":"u"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "expression", "symbols": ["expression$string$3"], "postprocess": () => ({ type: "global", value: "msg.value" })},
    {"name": "expression$string$4", "symbols": [{"literal":"b"}, {"literal":"l"}, {"literal":"o"}, {"literal":"c"}, {"literal":"k"}, {"literal":"."}, {"literal":"n"}, {"literal":"u"}, {"literal":"m"}, {"literal":"b"}, {"literal":"e"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "expression", "symbols": ["expression$string$4"], "postprocess": () => ({ type: "global", value: "block.number" })},
    {"name": "number$ebnf$1", "symbols": [/[0-9]/]},
    {"name": "number$ebnf$1", "symbols": ["number$ebnf$1", /[0-9]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "number", "symbols": ["number$ebnf$1"], "postprocess": ([digits]) => digits},
    {"name": "stringLiteral$ebnf$1", "symbols": []},
    {"name": "stringLiteral$ebnf$1", "symbols": ["stringLiteral$ebnf$1", /[^\"]/], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "stringLiteral", "symbols": [{"literal":"\""}, "stringLiteral$ebnf$1", {"literal":"\""}], "postprocess": ([_, chars, __]) => ({ type: "string", value: chars.join("") })},
    {"name": "statement$string$1", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "statement", "symbols": ["statement$string$1", "expression", {"literal":";"}], "postprocess": ([_, expr, __]) => ({ type: "return", expression: expr })},
    {"name": "statement", "symbols": ["variableDecl"], "postprocess": id},
    {"name": "statement", "symbols": ["expression", {"literal":";"}], "postprocess": ([expr, _]) => ({ type: "expression", expression: expr })},
    {"name": "statement$string$2", "symbols": [{"literal":"i"}, {"literal":"f"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "statement$ebnf$1", "symbols": []},
    {"name": "statement$ebnf$1", "symbols": ["statement$ebnf$1", "statement"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "statement", "symbols": ["statement$string$2", {"literal":"("}, "expression", {"literal":")"}, {"literal":"{"}, "statement$ebnf$1", {"literal":"}"}], "postprocess": ([_, __, condition, ___, ____, body, _____]) => ({ type: "if", condition, body })},
    {"name": "statement$string$3", "symbols": [{"literal":"f"}, {"literal":"o"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "statement$ebnf$2", "symbols": []},
    {"name": "statement$ebnf$2", "symbols": ["statement$ebnf$2", "statement"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "statement", "symbols": ["statement$string$3", {"literal":"("}, "variableDecl", "expression", {"literal":";"}, "expression", {"literal":")"}, {"literal":"{"}, "statement$ebnf$2", {"literal":"}"}], "postprocess": ([_, __, init, condition, ___, update, ____, body, _____]) => ({ type: "for", init, condition, update, body })},
    {"name": "statement$string$4", "symbols": [{"literal":"r"}, {"literal":"e"}, {"literal":"v"}, {"literal":"e"}, {"literal":"r"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "statement", "symbols": ["statement$string$4", {"literal":"("}, "expression", {"literal":")"}, {"literal":";"}], "postprocess": ([_, __, message, ___, ____]) => ({ type: "revert", message })}
]
  , ParserStart: "whitespace"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
